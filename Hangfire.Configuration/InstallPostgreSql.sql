DO
$$
    
DECLARE 
	var_TARGET_SCHEMA_VERSION INTEGER := $(HangfireConfigurationSchemaVersion);
	var_CURRENT_SCHEMA_VERSION INTEGER;
BEGIN
	RAISE NOTICE 'Installing HangfireConfiguration PostgreSql objects...';
	
	-- Acquire exclusive lock to prevent deadlocks caused by schema creation / version update
	--DECLARE @SchemaLockResult INT;
	--EXEC @SchemaLockResult = sp_getapplock @Resource = 'HangfireConfiguration:SchemaLock', @LockMode = 'Exclusive'

	-- Create the database schema if it doesn't exists
	CREATE SCHEMA IF NOT EXISTS $(HangfireConfigurationSchema);
	RAISE NOTICE 'Database schema HangfireConfiguration is available';
	
	-- Create the [HangfireConfiguration].Schema table if not exists
	CREATE TABLE IF NOT EXISTS $(HangfireConfigurationSchema).schema(
		version INTEGER NOT NULL
	)
	WITH (
	OIDS=FALSE
	);
	ALTER TABLE $(HangfireConfigurationSchema).schema
		DROP CONSTRAINT IF EXISTS pk_hangfireconfiguration_schema;
	ALTER TABLE $(HangfireConfigurationSchema).schema
		ADD CONSTRAINT pk_hangfireconfiguration_schema PRIMARY KEY (version);
	
	RAISE NOTICE 'Table HangfireConfiguration.Schema is available';


	select version into var_CURRENT_SCHEMA_VERSION from $(HangfireConfigurationSchema).schema;
	if var_CURRENT_SCHEMA_VERSION is null then
		insert into $(HangfireConfigurationSchema).schema (version) values (-1);
	end if;
	RAISE NOTICE 'Found schema version %', var_CURRENT_SCHEMA_VERSION;
	

	IF var_CURRENT_SCHEMA_VERSION IS NULL AND var_TARGET_SCHEMA_VERSION >= 5 THEN
		
		RAISE NOTICE 'Installing HangfireConfiguration schema version 5';
		
		CREATE TABLE IF NOT EXISTS $(HangfireConfigurationSchema).configuration(
			id INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
			connectionstring TEXT,
			schemaname TEXT,
			goalworkercount INTEGER,
			active BOOLEAN,
			name TEXT,
			maxworkersperserver INTEGER
		)
		WITH (
		OIDS=FALSE
		);
	
		ALTER TABLE $(HangfireConfigurationSchema).configuration 
			DROP CONSTRAINT IF EXISTS pk_hangfireconfiguration_configuration;
		ALTER TABLE $(HangfireConfigurationSchema).configuration  
			ADD CONSTRAINT pk_hangfireconfiguration_configuration PRIMARY KEY (id);
		
		CREATE TABLE IF NOT EXISTS $(HangfireConfigurationSchema).keyvaluestore(
			key VARCHAR(100) NOT NULL,
			value TEXT
		)
		WITH (
		OIDS=FALSE
		);
		
		ALTER TABLE $(HangfireConfigurationSchema).keyvaluestore
			DROP CONSTRAINT IF EXISTS pk_hangfireconfiguration_keyvaluestore;
		ALTER TABLE $(HangfireConfigurationSchema).keyvaluestore
			ADD CONSTRAINT pk_hangfireconfiguration_keyvaluestore PRIMARY KEY (key);
		
		RAISE NOTICE 'Installed schema version 5 WorkerBalancerEnabled column in $(HangfireConfigurationSchema).Configuration';
		
		var_CURRENT_SCHEMA_VERSION := 5;
	END IF;
    
	IF var_CURRENT_SCHEMA_VERSION < 6 AND var_TARGET_SCHEMA_VERSION >= 6 THEN
		
		RAISE NOTICE 'Installing HangfireConfiguration schema version 6';
		
		ALTER TABLE $(HangfireConfigurationSchema).Configuration
			ADD COLUMN WorkerBalancerEnabled BOOLEAN NULL;
		
		RAISE NOTICE 'Added WorkerBalancerEnabled column in $(HangfireConfigurationSchema).Configuration';
		
		var_CURRENT_SCHEMA_VERSION := 6;
	END IF;




	update $(HangfireConfigurationSchema).schema set version = var_CURRENT_SCHEMA_VERSION;

END;
$$